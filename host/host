#!/usr/bin/env python3
import struct
import sys
import json
import subprocess
import tempfile
import urllib.request
try:
    import urlparse
except:
    import urllib.parse as urlparse

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.buffer.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.buffer.write(bytes(message, 'utf-8'))
  sys.stdout.flush()
# Thread that reads messages from the webapp.
def read(respond):
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.buffer.read(4)
    if len(text_length_bytes) == 0:
      sys.exit(0)
    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]
    # Read the text (JSON object) of the message.
    text = sys.stdin.buffer.read(text_length).decode('utf-8')
    try:
        d = json.loads(text)
        send_message(json.dumps(respond(d)))
    except Exception as e:
        print('Error occured %s' % e)
        send_message(json.dumps(dict(status='failed', message='unknown',detailed=str(e))))

def respond(obj):
    print('Received %s' % obj)
    url = urlparse.urlparse(obj['url'])
    filepath = None
    call = None
    if url.netloc == 'arxiv.org':
        path = url.path
        if path[:4] == '/pdf':
            code = path.split('/')[-1].rstrip('.pdf')
            call = ['pubs', 'add', '-X', code]
            filepath = obj['url']
    if filepath is None:
        return dict(status='failed', message='not supported %s'% obj['url'])

    print('adding %s' % call)

    with urllib.request.urlopen(filepath) as resp, tempfile.NamedTemporaryFile() as f:
        f.write(resp.read())
        f.seek(0)
        call.extend(['-d', f.name, '-t', ','.join(obj['tags'])])
        subprocess.check_call(call)
        #return dict(status='failed', message='responded with error code %s' % status)

    return dict(status='success')
if __name__ == '__main__':
    read(respond)
    sys.exit(0)
